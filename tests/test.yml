---
- hosts: servers
  gather_facts: true  # required by the role
  name: "Add Package Source -- APT"
  remote_user: root
  vars_files:
    - vars/source-list.yml

  roles:
    - role: "package-source"
      pkgsource_present: "{{ source_list }}"
      become: true

  post_tasks:
    - name: "Check heroku source was added."
      command: grep -lr "https://cli-assets.heroku.com/branches/stable/apt" /etc/apt
      changed_when: false

    - name: "Ensure APT's cache was updated"
      assert:
        that:
          - pkgsource_cache_update is defined
          - pkgsource_cache_update is changed

    - name: "Reset cache update fact"
      set_fact:
        pkgsource_cache_update: {}

- hosts: servers
  name: "Delete Package Source -- APT"
  remote_user: root
  gather_facts: true  # required by the role
  vars_files:
    - vars/source-list.yml

  pre_tasks:
    - name: "Ensure cache update state is clean"
      assert:
        that:
          - pkgsource_cache_update == {}

  roles:
    - role: "package-source"
      pkgsource_absent: "{{ source_list }}"
      become: true

  post_tasks:
    - name: "Check heroku source was removed."
      command: grep -lr "https://cli-assets.heroku.com/branches/stable/apt" /etc/apt
      changed_when: false
      failed_when: result.rc != 1
      register: result

    - debug:
        var: pkgsource_cache_update
        verbosity: 1

    - name: "Ensure APT's cache last update timestamp"
      assert:
        that:
          # Ensures the handler was called.
          - pkgsource_cache_update != {}
          # Same as above here...
          # - pkgsource_cache_update is changed

    - name: "Reset cache update fact"
      set_fact:
        pkgsource_cache_update: {}


# vim: et:sw=2:syntax=yaml:ts=2:
